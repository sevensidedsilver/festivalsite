{"version":3,"sources":["app.js","controllers/controller.js","controllers/forumController.js","controllers/newThread.js","controllers/threadController.js","services/authService.js","services/postService.js","services/service.js"],"names":["angular","module","config","$stateProvider","$urlRouterProvider","state","url","templateUrl","title","controller","resolve","user","authService","$q","$state","$http","$window","defer","method","then","response","data","location","reject","getCurrentUser","window","catch","otherwise","$scope","$stateParams","homeSrv","menuclass","togglemenu","hideMenu","getThreads","openThreads","resp","threads","time","moment","fromNow","postService","postNewThread","thread_author","display_name","thread_title","postTitle","thread_content","postText","go","findThread","thread_id","thread","service","get","test","res","error","id","liveTime"],"mappings":"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","file":"all.js","sourcesContent":["angular.module('app', ['ui.router'])\n\n\n\n\n\n\n    .config(function($stateProvider, $urlRouterProvider){\n      //$urlRouterProvider.when(\"login\", window.location = \"http://localhost:3000/auth\")\n\n      $stateProvider\n        .state('home', {\n            url: '/',\n            templateUrl: \"./app/views/home/home.html\"\n\n        })\n\n// login state\n        .state('login', {\n            url: '/auth'\n\n        })\n\n// the forum\n        .state('forum', {\n            url: '/forum',\n            templateUrl: \"./app/views/forum/forum.html\",\n            title: 'Rha - Phorum',\n            controller: 'forumCtrl',\n            resolve:{\n              user: function (authService, $q, $state, $http, $window) {\n                var defer = $q.defer()\n               $http({\n                  method: \"GET\",\n                  url: '/auth/me'\n                }).then((response) => {\n\n                      if(!response.data.user) {\n                          $window.location = \"http://localhost:3000/auth\"\n                          defer.reject()\n                      } else {defer.resolve(response.data)}\n                  })\n              }\n            }\n        } )\n\n        .state('addpost', {\n            url: '/addpost',\n            controller: 'newPostCtrl',\n            templateUrl: \"./app/views/forum/addpost.html\",\n            resolve: {\n              user: (authService, $state) => {\n                  return authService.getCurrentUser().then((response) => {\n                      if(!response.data) {\n                          window.location = \"http://localhost:3000/auth\"\n                      } return response.data\n                  }).catch(err => {\n                      window.location = \"http://localhost:3000/auth\"\n                  })\n              }\n            }\n        } )\n        // up in a thread\n        .state('thread', {\n              url: '/thread/:thread_id',\n              templateUrl: \"./app/views/forum/thread.html\",\n\n              //needs controller\n              controller: \"thread\",\n              resolve: {\n                user: (authService, $state) => {\n                    return authService.getCurrentUser().then((response) => {\n                        if(!response.data) {\n                            window.location = \"http://localhost:3000/auth\"\n                        } return response.data\n                    }).catch(err => {\n                        window.location = \"http://localhost:3000/auth\"\n                    })\n                }\n              }\n          })\n\n// example from dallin\n          .state('admin', {\n             templateUrl: 'views/adminView.html',\n             url: '/admin',\n               controller: 'mainCtrl',\n               resolve: {\n                 user: (authService, $state) => {\n                     return authService.getCurrentUser().then((response) => {\n                         if(!response.data) {\n                             window.location = \"http://localhost:3000/auth\"\n                         } return response.data\n                     }).catch(err => {\n                         window.location = \"http://localhost:3000/auth\"\n                     })\n                 }\n               }\n           })\n\n\n        $urlRouterProvider\n            .otherwise('/')\n    })\n","angular.module('app').controller('homeCtrl', function($scope, $stateParams, homeSrv){\n\n\n// show the menu on click\n  $scope.menuclass = \"mobile-menu\"\n  $scope.togglemenu = function(){\n    if ($scope.menuclass === \"mobile-menu\"){\n      $scope.menuclass = \"mobile-menu show-mobile-menu\"\n    } else if ($scope.menuclass === \"mobile-menu show-mobile-menu\"){\n      $scope.menuclass = \"mobile-menu\"\n    }\n  }\n\n\n\n\n\n  $scope.hideMenu = function (){\n    $scope.menuclass = \"mobile-menu\"\n  }\n\n  $scope.getThreads = function(){\n\n    homeSrv.openThreads().then(function(resp){\n      // console.log(resp.data)\n      $scope.threads = resp.data\n\n    })\n\n}\n\n  $scope.getThreads()\n\n// assign threads to the scope\n\n\n\n\n})\n","angular.module('app').controller('forumCtrl', function(authService, $scope, $stateParams, homeSrv){\n\n\n\n\n    $scope.getThreads = function(){\n\n      homeSrv.openThreads().then(function(resp){\n\n        $scope.threads = resp.data\n\n      })\n\n  }\n\n    $scope.getThreads()\n\n\n    $scope.time = moment(\"20170621, 7:14:44\", \"YYYYMMDD, h:mm:ss\").fromNow();\n\n\n\n})\n","angular.module('app').controller('newPostCtrl', function(postService, $state, authService, $scope, $http, $window, $stateParams, homeSrv){\n\n\n  //create post on button click and push to database\n\n  $scope.postNewThread = function(){\n    var data = {\n      thread_author: $scope.display_name,\n      thread_title: $scope.postTitle,\n      thread_content: $scope.postText\n    }\n\n    $http({\n      method: \"POST\",\n      url: \"/newthread\",\n      data: data\n    }).then(function(){\n      // whatever you want to do after the posting goes here!\n      $scope.postTitle = \"\";\n      $scope.postText = \"\";\n      $state.go('forum')\n\n    })\n  }\n\n\n\n\n  // this gets the session and pulls the displayName from it\n  // $http({\n  //    method: \"GET\",\n  //    url: '/auth/me'\n  //  }).then((response) => {\n  //\n  //        if(!response.data.user) {\n  //            $window.location = \"http://localhost:3000/auth\"\n  //            defer.reject()\n  //       //  } else {\n  //        //\n  //       //   //  $scope.display_name = response.data.user.displayName\n  //       //   //  $http({\n  //       //   //    method: \"PUT\",\n  //       //   //    url\n  //        //\n  //       //    })\n  //        }\n  //    })\n\n\n\n\n\n})\n","angular.module('app').controller('thread', function($scope, $http, $window, $stateParams, homeSrv){\n\n\n  // //fetches the thread data from service and assigns it to thread\n  homeSrv.findThread($stateParams.thread_id).then(function(resp){\n    //console.log(resp)\n    $scope.thread = resp.data[0]\n\n\n\n\n  })\n  // console.log($stateParams.thread_id)\n\n})\n","angular.module('app').service('authService', function($http){\n\n  // returns the current user object from auth0\n  this.getCurrentUser = function () {\n    //console.log(\"test\")\n    return $http.get('/auth/me').then(function(response){\n      //console.log(response)\n      return response\n\n    })\n\n  }\n\n\n  this.test = function(){\n\n    return $http({\n      method: \"GET\",\n      url: \"/auth/me\"\n    }).then(function(res){\n      //console.log(res)\n    }).catch(function(error){\n      //console.log(error)\n    })\n\n  }\n\n})\n","angular.module('app').service('postService', function($http){\n\n  // returns the current user object from auth0\n  this.getCurrentUser = function () {\n    //console.log(\"test\")\n    return $http.get('/auth/me').then(function(response){\n      //console.log(response)\n      return response\n\n    })\n\n  }\n\n\n  this.test = function(){\n\n    return $http({\n      method: \"GET\",\n      url: \"/auth/me\"\n    }).then(function(res){\n      //console.log(res)\n    }).catch(function(error){\n      //console.log(error)\n    })\n\n  }\n\n})\n","angular.module('app').service('homeSrv', function($http){\n\n  this.openThreads = function(){\n    return $http({\n      url: '/threads',\n      method: 'GET',\n    }).then(function(resp){\n      return resp;\n    })\n  }\n\n\n  this.findThread = function(id){\n    return $http({\n      url: '/thread/' + id,\n      method: 'GET',\n    }).then(function(resp){\n      return resp;\n    })\n  }\n\n\n// moment JS to get the \"X hours ago\" for comments and threads\n  this.liveTime = function(time) {\n    //conver dis 2017-06-21T15:44:08.049Z\n\n\n    //into dis 20170621, h:mm:ss\n\n  }\n\n\n\n\n})\n"]}